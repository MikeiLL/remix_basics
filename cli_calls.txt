import mix_tracks_utils as mtu
from action import Crossfade as cf
from action import Playback as pb
from action import render

track1 = mtu.lazarus('audio/Track01.mp3.analysis.en')
malcolm = mtu.lazarus('audio/malcolmmarsden.mp3.analysis.en')

tr1s = track1.analysis.tatums[40].start
mms = malcolm.analysis.tatums[10].start
cfade = cf((track1, malcolm),(tr1s, mms), 12)

tr1s2 = track1.analysis.tatums[10].start
mms2 = malcolm.analysis.tatums[20].start
cfade2 = cf((malcolm,track1),(mms2,tr1s2), 14)

cross_faded = cfade.render()
cross_faded.encode('crossfade.mp3')

from action import Blend as bl

some_track1 = track1.analysis.tatums[20:40]
some_malcolm = malcolm.analysis.tatums[0:20]

track1_list = [(t.start, t.duration) for t in some_track1]
malcolm_list = [(t.start, t.duration) for t in some_malcolm]

blended = bl((track1, malcolm), (track1_list, malcolm_list))

>>> blended
<Blend 'audio/Track01.mp3' and 'audio/malcolmmarsden.mp3'>

>>> blended.__str__()
'Blend [6.032, 0.726] -> [11.276, 6.422] (5.470)\taudio/Track01.mp3 + audio/malcolmmarsden.mp3'
 
combined = []
playable1 = pb(track1, tr1s, 10)
combined.extend([playable1,cfade2])
combined.extend([cfade])



render(combined, 'combined.mp3')


>>> combined.extend([blended])
>>> render(combined, 'combined.mp3')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/Users/mikekilmer/Envs/GLITCH/lib/python2.7/site-packages/echonest/remix/action.py", line 45, in render
    out = assemble(pieces, numChannels=2, sampleRate=44100, verbose=verbose)
  File "/Users/mikekilmer/Envs/GLITCH/lib/python2.7/site-packages/echonest/remix/audio.py", line 807, in assemble
    return AudioData(ndarray=numpy.concatenate([a.data for a in audioDataList]),
AttributeError: 'NoneType' object has no attribute 'data'

from action import Crossmatch as cm

matched = cm((track1, malcolm), (track1_list, malcolm_list))
>>> combined.pop()
<Blend 'audio/Track01.mp3' and 'audio/malcolmmarsden.mp3'>
>>> combined.extend([matched])
>>> render(combined, 'combined.mp3')
['en-ffmpeg', '-i', '/var/folders/jj/2s5dn_7s42l75qyx7x5nbpwr0000gn/T/tmpCqzsgS.wav', '-y', '-ab', '128k', '-ac', '2', '-ar', '44100', 'combined.mp3']
Deleting: /var/folders/jj/2s5dn_7s42l75qyx7x5nbpwr0000gn/T/tmpCqzsgS.wav
(<echonest.remix.audio.AudioData object at 0x107cf85d0>, 'combined.mp3')

only_cmmed = []

>>> only_cmmed.extend(matched)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'Crossmatch' object is not iterable
>>> only_cmmed.extend([matched])
>>> render(only_cmmed, 'combined.mp3')
['en-ffmpeg', '-i', '/var/folders/jj/2s5dn_7s42l75qyx7x5nbpwr0000gn/T/tmpIkizun.wav', '-y', '-ab', '128k', '-ac', '2', '-ar', '44100', 'combined.mp3']
Deleting: /var/folders/jj/2s5dn_7s42l75qyx7x5nbpwr0000gn/T/tmpIkizun.wav
(<echonest.remix.audio.AudioData object at 0x107cf85d0>, 'combined.mp3')

chopek = mtu.make_save_one('audio/chopek.mp3')
chopek_tatum_list = [(t.start, t.end) for t in chopek.analysis.tatums]
chopek_segment_list = [(s.start, s.end) for s in chopek.analysis.segments]
chopek_beat_list = [(b.start, b.end) for b in chopek.analysis.beats]

import matplotlib.pyplot as plt

title = "Start and End Bits of {}".format(chopek.filename)
plt.title(title)
plt.text(0, .6, 'Start Segments')
plt.text(0, 1.2, 'Start Tatums')
plt.text(0, 1.8, 'Start Beats')
plt.text(0, -.6, 'End Segments')
plt.text(0, -1.2, 'End Tatums')
plt.text(0, -1.8, 'End Beats')
plt.axis([-1, 5, -3, 3])
plt.grid(True)
for i in chopek_segment_list[:8]:
    plt.plot(i,[.5,.5], linewidth=10)
    
for i in chopek_tatum_list[:8]:
    plt.plot(i,[1,1], linewidth=10)
    
for i in chopek_beat_list[:4]:
    plt.plot(i,[1.5,1.5], linewidth=10)

offset = '' 
for i in chopek_segment_list[-8:]:
    while not offset:
        offset = i[0]
    j = (i[0] - offset, i[1] - offset)
    plt.plot(j,[-.8,-.8], linewidth=10)
    
for i in chopek_tatum_list[-8:]:
    while not offset:
        offset = i[0]
    j = (i[0] - offset, i[1] - offset)
    plt.plot(i,[-1.3,-1.3], linewidth=10)
    
for i in chopek_beat_list[-4:]:
    while not offset:
        offset = i[0]
    j = (i[0] - offset, i[1] - offset)
    plt.plot(i,[-1.8,-1.8], linewidth=10)
    
plt.show()